name: Build Solo Wolf Android App

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install Gradle CLI
      uses: gradle/gradle-build-action@v2

    - name: Generate gradle-wrapper.jar if missing
      run: |
        if [ ! -f "./gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "gradle-wrapper.jar not found. Generating using installed Gradle..."
          ./gradlew wrapper
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle and capture errors
      run: |
        ./gradlew assembleDebug --stacktrace --info > build_output.txt 2>&1
        if grep -q "FAILURE" build_output.txt; then
          echo "Build failed. Check build_output.txt for details."
          cat build_output.txt
          exit 1
        else
          echo "Build succeeded."
        fi

    - name: Check if APK exists
      id: check_apk
      run: |
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "APK_EXISTS=true" >> $GITHUB_OUTPUT
          echo "APK exists"
        else
          echo "APK_EXISTS=false" >> $GITHUB_OUTPUT
          echo "APK does not exist"
          exit 1
        fi

    - name: Upload APK
      if: steps.check_apk.outputs.APK_EXISTS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: solo-wolf-apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Upload build output on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: build_output.txt

    - name: Clear Gradle Cache (optional, but can save space)
      run: |
        rm -rf ~/.gradle/caches/*
        rm -rf ~/.gradle/wrapper/dists/*

    - name: Generate file tree with contents (debugging)
      if: false # Disable by default, enable for debugging
      run: |
        echo "Generating file tree with contents..."
        find . -type f ! -path "./.git/*" | while read file; do
          echo "FILE: $file"
          echo "---------------------"
          cat "$file"
          echo -e "\n\n"
        done > tree.txt

    - name: Upload file tree (debugging)
      if: false # Disable by default, enable for debugging
      uses: actions/upload-artifact@v4
      with:
        name: source-tree
        path: tree.txt